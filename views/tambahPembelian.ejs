<div class="d-flex align-items-center mb-3">
    <button class="btn btn-back me-2 py-0 ps-0 border-0" onclick="window.history.back()"><i class="bi bi-arrow-left fs-5"></i></button>
    <h5 class="mb-0">Tambah Pembelian</h5>
  </div>
  
  <div class="row">
    <div class="col-md-6">
      <div class="input-group mb-3">
        <span class="input-group-text fw-bold" style="width: 150px">Tanggal</span>
        <input type="date" id="tglPembelian" class="form-control" required />
      </div>
    </div>
    <div class="col-md-6">
      <div class="input-group mb-3">
        <span class="input-group-text fw-bold" style="width: 150px">Supplier</span>
        <select class="form-select" id="kodeSupplier"></select>
      </div>
    </div>
  </div>
  
  <div class="row">
    <div class="col-md-6">
      <div class="input-group">
        <span class="input-group-text fw-bold" style="width: 150px">No. Invoice</span>
        <input type="text" id="noInv" class="form-control" required />
      </div>
    </div>
  </div>
  
  <div class="d-flex flex-column mt-3 w-100">
    <div class="container flex-grow-1 bg-white shadow-sm p-4 border rounded">
      <div class="d-flex justify-content-between align-items-center">
        <h5 class="mb-1">List Barang</h5>
        <button class="btn btn-success" onclick="showAddModal()"><i class="bi bi-plus"></i> Tambah Barang</button>
      </div>
  
      <!-- Tabel Barang di Pembelian -->
      <table class="table table-hover rounded-3 overflow-hidden mt-3">
        <thead>
          <tr>
            <th scope="col" style="width: 250px">Produk</th>
            <th scope="col" style="width: 80px; text-align: center">Qty</th>
            <th scope="col">Harga</th>
            <th scope="col">Diskon</th>
            <th scope="col">Total</th>
            <th scope="col" class="text-center" style="width: 200px">Aksi</th>
          </tr>
        </thead>
        <tbody id="list"></tbody>
      </table>
      <!-- End Tabel Barang -->
  
      <!-- Modal untuk menambah barang -->
      <div class="modal fade" id="modalTambah" tabindex="-1" aria-labelledby="modalTambahLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="editTaskModalLabel">Tambah Produk</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div class="input-group mb-4">
                <span class="input-group-text fw-semibold" style="width: 150px">Kode</span>
                <select class="form-select" id="kodeBB"></select>
              </div>
              <div class="input-group mb-4">
                <span class="input-group-text fw-semibold" style="width: 150px">Qty</span>
                <input type="number" id="qty" class="form-control" required min="1" />
              </div>
              <div class="input-group mb-4">
                <span class="input-group-text fw-semibold" style="width: 150px">Harga</span>
                <input type="number" id="hargaBeli" class="form-control" required min="1" />
              </div>
              <div class="input-group mb-4">
                <span class="input-group-text fw-semibold" style="width: 150px">Diskon</span>
                <input type="number" id="diskonItem" class="form-control" required min="1" />
              </div>
              <div class="input-group mb-4">
                <span class="input-group-text fw-semibold" style="width: 150px">Tipe Diskon</span>
                <select id="tipeDiskon" class="form-select">
                  <option value="nominal">Nominal</option>
                  <option value="persen">Persen</option>
                </select>
              </div>
              <div class="input-group mb-4">
                <span class="input-group-text fw-semibold" style="width: 150px">Aktifkan PPN</span>
                <select id="isPPNActive" class="form-select">
                  <option value="true">Ya</option>
                  <option value="false">Tidak</option>
                </select>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
              <button type="button" class="btn btn-success" onclick="tambah()">Tambah</button>
            </div>
          </div>
        </div>
      </div>
      <!-- End Modal -->
  
      <!-- Modal untuk mengedit barang -->
      <div class="modal fade" id="modalEdit" tabindex="-1" aria-labelledby="modalTambahLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="editTaskModalLabel">Edit Produk</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <div class="input-group mb-4">
                <span class="input-group-text fw-semibold" style="width: 150px">Kode</span>
                <select class="form-select" id="editKodeBB"></select>
              </div>
              <div class="input-group mb-4">
                <span class="input-group-text fw-semibold" style="width: 150px">Qty</span>
                <input type="number" id="editQty" class="form-control" required min="1" />
              </div>
              <div class="input-group mb-4">
                <span class="input-group-text fw-semibold" style="width: 150px">Harga</span>
                <input type="number" id="editHargaBeli" class="form-control" required min="1" />
              </div>
              <div class="input-group mb-4">
                <span class="input-group-text fw-semibold" style="width: 150px">Diskon</span>
                <input type="number" id="editDiskonItem" class="form-control" required min="1" />
              </div>
              <div class="input-group mb-4">
                <span class="input-group-text fw-semibold" style="width: 150px">Tipe Diskon</span>
                <select id="editTipeDiskon" class="form-select">
                  <option value="nominal">Nominal</option>
                  <option value="persen">Persen</option>
                </select>
              </div>
              <div class="input-group mb-4">
                <span class="input-group-text fw-semibold" style="width: 150px">Aktifkan PPN</span>
                <select id="editIsPPNActive" class="form-select">
                  <option value="true">Ya</option>
                  <option value="false">Tidak</option>
                </select>
              </div>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
              <button type="button" class="btn btn-warning" onclick="edit()">Edit</button>
            </div>
          </div>
        </div>
      </div>
      <!-- End Modal -->
  
      <!-- Modal untuk hapus  -->
      <div class="modal fade" id="modalHapus" tabindex="-1" aria-labelledby="modalHapusLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="editTaskModalLabel">Hapus Produk</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">Apakah Anda yakin ingin menghapus barang ini?</div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
              <button type="button" class="btn btn-danger" onclick="hapus()">Hapus</button>
            </div>
          </div>
        </div>
      </div>
      <!-- End Modal -->
    </div>
  </div>
  
  <div class="row mt-3 flex-row-reverse">
    <div class="col-md-4">
      <div class="card" style="height: 120px">
        <div class="card-body">
          <h6 class="card-title mt-2">Total</h6>
          <h5 class="card-subtitle mt-3" id="totalPembelian">Rp</h5>
        </div>
      </div>
    </div>
    <div class="col-md-4">
      <div class="card" style="height: 120px">
        <div class="card-body">
          <h6 class="card-title mt-2">PPN</h6>
          <h5 class="card-subtitle mt-3" id="ppnPembelian">Rp</h5>
        </div>
      </div>
    </div>
  </div>
  
  <div class="d-flex flex-row-reverse mt-4">
    <button type="button" class="btn btn-primary" onclick="simpan()" style="width: 20%">Simpan</button>
  </div>
  
  <script>
    // Simpan barang ke dalam array sementara untuk detailPembelian
    let detailPembelian = [];
    let currentIndex = 0;
  
    // Opsi untuk supplier
    async function loadSupplier() {
      try {
        const response = await fetch("/api/supplier", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });
  
        if (response.ok) {
          const data = await response.json();
          const select = document.getElementById("kodeSupplier");
          data.forEach((supplier) => {
            const option = document.createElement("option");
            option.value = supplier.kodeSupplier; // nilai yang disimpan saat dipilih
            option.textContent = `${supplier.kodeSupplier} - ${supplier.namaSupplier}`; // teks yang ditampilkan
            select.appendChild(option);
          });
        }
      } catch (error) {
        console.error(error);
      }
    }
  
    // Opsi untuk barang
    async function loadBarang(modalType = "edit") {
      try {
        const response = await fetch("/api/BB", {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });
  
        if (response.ok) {
          const data = await response.json();
          const select = modalType === "edit" ? document.getElementById("editKodeBB") : document.getElementById("kodeBB");
  
          // Hapus semua opsi yang ada sebelumnya untuk menghindari duplikasi
          select.innerHTML = ""; // Ini akan menghapus semua opsi dalam <select>
  
          data.forEach((barang) => {
            const option = document.createElement("option");
            option.value = barang.kodeBB; // nilai yang disimpan saat dipilih
            option.textContent = `${barang.kodeBB} - ${barang.namaBB}`; // teks yang ditampilkan
            select.appendChild(option);
          });
        }
      } catch (error) {
        console.error(error);
      }
    }
  
    // Fungsi untuk menampilkan modal tambah
    async function showAddModal() {
      await loadBarang("tambah");
      new bootstrap.Modal(document.getElementById("modalTambah")).show();
    }
  
    // Fungsi untuk menampilkan modal edit
    async function showEditModal(index) {
      document.getElementById("editKodeBB").value = detailPembelian[index].kodeBB;
      document.getElementById("editQty").value = detailPembelian[index].qty;
      document.getElementById("editHargaBeli").value = detailPembelian[index].hargaBeli;
      document.getElementById("editDiskonItem").value = detailPembelian[index].diskonItem;
      document.getElementById("editTipeDiskon").value = detailPembelian[index].tipeDiskon;
      document.getElementById("editIsPPNActive").value = detailPembelian[index].isPPNActive;
      currentIndex = index;
      new bootstrap.Modal(document.getElementById("modalEdit")).show();
    }
  
    // Fungsi untuk menampilkan modal hapus
    async function showDeleteModal(index) {
      currentIndex = index;
      new bootstrap.Modal(document.getElementById("modalHapus")).show();
    }
  
    // Fungsi untuk menambah barang
    async function tambah() {
      // Ambil nilai dari input form
      const kodeBB = document.getElementById("kodeBB").value;
      const qty = document.getElementById("qty").value;
      const hargaBeli = document.getElementById("hargaBeli").value;
      const diskonItem = document.getElementById("diskonItem").value;
      const tipeDiskon = document.getElementById("tipeDiskon").value;
      const isPPNActive = document.getElementById("isPPNActive").value === "true"; // Mengonversi string ke boolean
  
      // Hitung subtotal
      let subtotal = parseFloat(hargaBeli) * parseInt(qty);
  
      // Hitung diskon jika tipe diskon nominal atau persen
      let diskon = 0;
      if (tipeDiskon === "persen") {
        diskon = (diskonItem / 100) * subtotal;
      } else {
        diskon = parseFloat(diskonItem); // Nominal
      }
  
      // Hitung PPN jika aktif
      let ppn = 0;
      if (isPPNActive) {
        ppn = subtotal * 0.11;
      }
  
      // Hitung total setelah diskon
      let total = subtotal - diskon;
  
      const barangBaru = {
        kodeBB,
        hargaBeli: parseFloat(hargaBeli),
        qty: parseInt(qty),
        diskonItem: parseFloat(diskonItem),
        tipeDiskon,
        isPPNActive,
        ppnItem: ppn,
        subtotal: total,
      };
  
      // Tambahkan barang ke detailPembelian
      detailPembelian.push(barangBaru);
      // Update tampilan list barang (dalam tabel)
      tampilkanBarang();
      updateSummaryCards();
  
      document.getElementById("kodeBB").value = "";
      document.getElementById("qty").value = "";
      document.getElementById("hargaBeli").value = "";
      document.getElementById("diskonItem").value = "";
      document.getElementById("tipeDiskon").value = "nominal";
      document.getElementById("isPPNActive").value = "true";
  
      // Menutup modal setelah barang berhasil ditambah
      const modal = document.getElementById("modalTambah");
      const modalInstance = bootstrap.Modal.getInstance(modal);
      modalInstance.hide(); // Menutup modal
    }
  
    // Fungsi untuk mengedit barang
    async function edit() {
      // Ambil nilai dari input form
      const kodeBB = document.getElementById("editKodeBB").value;
      const qty = document.getElementById("editQty").value;
      const hargaBeli = document.getElementById("editHargaBeli").value;
      const diskonItem = document.getElementById("editDiskonItem").value;
      const tipeDiskon = document.getElementById("editTipeDiskon").value;
      const isPPNActive = document.getElementById("editIsPPNActive").value === "true"; // Mengonversi string ke boolean
  
      // Hitung subtotal
      let subtotal = parseFloat(hargaBeli) * parseInt(qty);
  
      // Hitung diskon jika tipe diskon nominal atau persen
      let diskon = 0;
      if (tipeDiskon === "persen") {
        diskon = (diskonItem / 100) * subtotal;
      } else {
        diskon = parseFloat(diskonItem); // Nominal
      }
  
      // Hitung PPN jika aktif
      let ppn = 0;
      if (isPPNActive) {
        ppn = subtotal * 0.11;
      }
  
      // Hitung total setelah diskon
      let total = subtotal - diskon;
  
      const barangEdit = {
        kodeBB,
        hargaBeli: parseFloat(hargaBeli),
        qty: parseInt(qty),
        diskonItem: parseFloat(diskonItem),
        tipeDiskon,
        isPPNActive,
        ppnItem: ppn,
        subtotal: total,
      };
  
      // Tambahkan barang ke detailPembelian
      detailPembelian[currentIndex] = barangEdit;
      // Update tampilan list barang (dalam tabel)
      tampilkanBarang();
      updateSummaryCards();
  
      // Menutup modal setelah barang berhasil dihapus
      const modal = document.getElementById("modalEdit");
      const modalInstance = bootstrap.Modal.getInstance(modal);
      modalInstance.hide(); // Menutup modal
    }
    
    // Fungsi untuk menghapus barang
    async function hapus() {
      // Hapus barang dari array
      detailPembelian.splice(currentIndex, 1);
  
      tampilkanBarang();
      updateSummaryCards();
      // Menutup modal setelah barang berhasil dihapus
      const modal = document.getElementById("modalHapus");
      const modalInstance = bootstrap.Modal.getInstance(modal);
      modalInstance.hide(); // Menutup modal
    }
  
    // Fungsi untuk mendapatkan nama barang berdasarkan kode
    async function getNamaBarang(kodeBB) {
      try {
        const response = await fetch(`/api/BB/nama/${kodeBB}`, {
          method: "GET",
          headers: {
            "Content-Type": "application/json",
          },
        });
  
        // Periksa status respons
        if (!response.ok) {
          throw new Error(`Failed to fetch barang name, status: ${response.status}`);
        }
  
        const data = await response.json();
        console.log(data); // Lihat data yang diterima
        return data.namaBB;
      } catch (error) {
        console.error("Error fetching barang name:", error.message);
        return "";
      }
    }
  
    async function tampilkanBarang() {
      const tbody = document.getElementById("list");
      tbody.innerHTML = ""; // Kosongkan tabel sebelum menambah data baru
  
      // Untuk setiap item di detailPembelian, kita ambil nama barang secara asynchronous
      for (let i = 0; i < detailPembelian.length; i++) {
        const item = detailPembelian[i];
  
        // Menunggu nama barang untuk setiap kodeBB
        const namaBarang = await getNamaBarang(item.kodeBB);
  
        const row = document.createElement("tr");
        row.innerHTML = `
        <td>${item.kodeBB} - ${namaBarang}</td>
        <td style="text-align: center;">${item.qty}</td>
        <td>Rp ${item.hargaBeli}</td>
        <td>${item.tipeDiskon === "nominal" ? "Rp " : ""}${item.diskonItem}${item.tipeDiskon === "persen" ? "%" : ""}</td>
        <td>Rp ${item.subtotal}</td>
        <td class="text-center">
          <button class="btn btn-warning" onclick="showEditModal(${i})"><i class="bi bi-pencil"></i> Edit</button>
          <button class="btn btn-danger" onclick="showDeleteModal(${i})"><i class="bi bi-trash"></i> Delete</button>
        </td>
      `;
        tbody.appendChild(row);
      }
    }
  
    // Fungsi untuk mengupdate card PPN dan Total
    function updateSummaryCards() {
      // Hitung total PPN dan subtotal
      let totalPPN = 0;
      let subtotal = 0;
  
      detailPembelian.forEach((item) => {
        subtotal += item.subtotal;
        if (item.isPPNActive) {
          totalPPN += item.subtotal * 0.11; // PPN 11%
        }
      });
  
      // Hitung total akhir
      const total = subtotal + totalPPN;
  
      // Update card
      document.getElementById("ppnPembelian").textContent = `Rp ${totalPPN.toLocaleString()}`;
      document.getElementById("totalPembelian").textContent = `Rp ${total.toLocaleString()}`;
    }
  
    // Fungsi untuk simpan pembelian
    async function simpan() {
      try {
        // Ambil nilai dari form input
        const noInv = document.getElementById("noInv").value;
        const tglPembelian = document.getElementById("tglPembelian").value;
        const kodeSupplier = document.getElementById("kodeSupplier").value;
  
        // Hitung total PPN dan total pembelian
        let ppnPembelian = 0;
        let totalPembelian = 0;
  
        detailPembelian.forEach((item) => {
          totalPembelian += item.subtotal;
          ppnPembelian += item.ppnItem || 0;
        });
  
        totalPembelian += ppnPembelian;
  
        // Pastikan semua field required ada
        const pembelianData = {
          noInv,
          tglPembelian: new Date(tglPembelian).toISOString(),
          kodeSupplier,
          detailPembelian: detailPembelian.map((item) => ({
            kodeBB: item.kodeBB,
            hargaBeli: item.hargaBeli,
            qty: item.qty,
            diskonItem: item.diskonItem || 0,
            tipeDiskon: item.tipeDiskon || "nominal",
            isPPNActive: item.isPPNActive || false,
            ppnItem: item.ppnItem || 0,
            subtotal: item.subtotal,
          })),
          ppnPembelian,
          totalPembelian,
        };
  
        // Validasi data sebelum dikirim
        if (!noInv || !tglPembelian || !kodeSupplier || detailPembelian.length === 0) {
          throw new Error("Harap lengkapi semua field yang diperlukan");
        }
  
        const response = await fetch("/api/pembelian", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(pembelianData),
        });
  
        const data = await response.json();
  
        if (!response.ok) {
          throw new Error(data.error || "Gagal menyimpan pembelian");
        }
  
        // Redirect setelah berhasil simpan
        window.location.href = "/pembelian";
      } catch (error) {
        console.error("Error:", error);
      }
    }
    
    document.addEventListener("DOMContentLoaded", function () {
      loadBarang();
      loadSupplier();
      updateSummaryCards();
    });
  </script>